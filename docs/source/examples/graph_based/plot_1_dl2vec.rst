
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/graph_based/plot_1_dl2vec.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_graph_based_plot_1_dl2vec.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_graph_based_plot_1_dl2vec.py:


DL2Vec
========

This example corresponds to the paper `Predicting candidate genes from phenotypes, functions and anatomical site of expression <https://doi.org/10.1093/bioinformatics/btaa879>`_. 

This work is a graph-based machine-learning method to learn from biomedical ontologies. This method works by transforming the ontology into a graph following a set of rules. Random walks are generated from the obtained graph and then processed by a Word2Vec model, which generates 
embeddings of the original ontology classes. This algorithm is applied to generate numerical representations of genes and diseases based on the background knowledge found in the Gene Ontology, which was extended to incorporate phenotypes, functions of the gene products and anatomical location of gene expression. The representations of genes and diseases are then used to predict candidate genes for a given disease.

.. GENERATED FROM PYTHON SOURCE LINES 19-24

To show an example of DL2Vec, we need 3 components:

- The ontology projector
- The random walks generator
- The Word2Vec model

.. GENERATED FROM PYTHON SOURCE LINES 24-37

.. code-block:: default


    import sys
    sys.path.append('../../')
    import mowl
    mowl.init_jvm("10g")

    from mowl.datasets.builtin import GDAMouseDataset
    from mowl.projection import DL2VecProjector
    from mowl.walking import DeepWalk
    from gensim.models.word2vec import LineSentence
    from gensim.models import Word2Vec









.. GENERATED FROM PYTHON SOURCE LINES 38-44

Projecting the ontology
-----------------------

We project the ontology using the DL2VecProjector class. The rules used to project the 
ontology can be found at :doc:`/graphs/projection`. The outcome of the projection algorithm
is an edgelist.

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: default


    dataset = GDAMouseDataset()

    projector = DL2VecProjector(bidirectional_taxonomy=True)
    edges = projector.project(dataset.ontology)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/zhapacfp/Git/mowl/examples/graph_based/plot_1_dl2vec.py", line 45, in <module>
        dataset = GDAMouseDataset()
      File "/home/zhapacfp/Git/mowl/mowl/datasets/builtin/gda.py", line 83, in __init__
        super().__init__(url=DATA_MOUSE_URL)
      File "/home/zhapacfp/Git/mowl/mowl/datasets/builtin/gda.py", line 35, in __init__
        super().__init__(url=url)
      File "/home/zhapacfp/Git/mowl/mowl/datasets/base.py", line 363, in __init__
        super().__init__(tarfile_path)
      File "/home/zhapacfp/Git/mowl/mowl/datasets/base.py", line 314, in __init__
        self._extract()
      File "/home/zhapacfp/Git/mowl/mowl/datasets/base.py", line 344, in _extract
        safe_extract(tarf, path=self.data_root)
      File "/home/zhapacfp/Git/mowl/mowl/datasets/base.py", line 337, in safe_extract
        for member in tar.getmembers():
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/tarfile.py", line 1791, in getmembers
        self._load()        # all members, we first have to
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/tarfile.py", line 2379, in _load
        tarinfo = self.next()
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/tarfile.py", line 2310, in next
        self.fileobj.seek(self.offset - 1)
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/gzip.py", line 384, in seek
        return self._buffer.seek(offset, whence)
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/_compression.py", line 143, in seek
        data = self.read(min(io.DEFAULT_BUFFER_SIZE, offset))
      File "/home/zhapacfp/miniconda3/envs/mowldev38/lib/python3.8/gzip.py", line 498, in read
        raise EOFError("Compressed file ended before the "
    EOFError: Compressed file ended before the end-of-stream marker was reached




.. GENERATED FROM PYTHON SOURCE LINES 51-56

Generating random walks
-----------------------

The random walks are generated using the DeepWalk class. This class implements the DeepWalk
algorithm with a modification consisting of including the edge labels as part of the walks.

.. GENERATED FROM PYTHON SOURCE LINES 56-65

.. code-block:: default


    walker = DeepWalk(20, # number of walks per node
                      20, # walk length
                      0.1, # restart probability
                      workers=4) # number of threads

    walks = walker.walk(edges)



.. GENERATED FROM PYTHON SOURCE LINES 66-70

Training the Word2Vec model
---------------------------

To train the Word2Vec model, we rely on the Gensim library:

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: default


    walks_file = walker.outfile
    sentences = LineSentence(walks_file)
    model = Word2Vec(sentences, vector_size=100, epochs = 20, window=5, min_count=1, workers=4)


.. GENERATED FROM PYTHON SOURCE LINES 76-82

Evaluating the embeddings
------------------------------

We can evaluate the embeddings using the
:class:`EmbeddingsRankBasedEvaluator <mowl.evaluation.rank_based.EmbeddingsRankBasedEvaluator>`
class. We need to do some data preparation.

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default


    from mowl.evaluation.rank_based import EmbeddingsRankBasedEvaluator
    from mowl.evaluation.base import CosineSimilarity
    from mowl.projection import TaxonomyWithRelationsProjector

.. GENERATED FROM PYTHON SOURCE LINES 87-89

We are going to evaluate the plausability of an association gene-disease with a gene against all
possible diseases and check the rank of the true disease association.

.. GENERATED FROM PYTHON SOURCE LINES 89-99

.. code-block:: default


    genes, diseases = dataset.evaluation_classes

    projector = TaxonomyWithRelationsProjector(taxonomy=False,
                                               relations=["http://is_associated_with"])

    evaluation_edges = projector.project(dataset.testing)
    filtering_edges = projector.project(dataset.ontology)
    assert len(evaluation_edges) > 0


.. GENERATED FROM PYTHON SOURCE LINES 100-102

The gene-disease associations will be scoredc using cosine similarity. For that reason we use
the ``CosineSimilarity`` class.

.. GENERATED FROM PYTHON SOURCE LINES 102-115

.. code-block:: default


    vectors = model.wv
    evaluator = EmbeddingsRankBasedEvaluator(
        vectors,
        evaluation_edges,
        CosineSimilarity,
        training_set=filtering_edges,
        head_entities = genes.as_str,
        tail_entities = diseases.as_str,
        device = 'cpu'
    )

    evaluator.evaluate(show=True)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.064 seconds)

**Estimated memory usage:**  1654 MB


.. _sphx_glr_download_examples_graph_based_plot_1_dl2vec.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_dl2vec.py <plot_1_dl2vec.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_dl2vec.ipynb <plot_1_dl2vec.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
